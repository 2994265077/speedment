package com.company.sakila.db0.sakila.staff.generated;

import com.company.sakila.db0.sakila.staff.Staff;
import com.company.sakila.db0.sakila.staff.StaffImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.company.sakila.db0.sakila.staff.Staff} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedStaffSqlAdapter implements SqlAdapter<Staff> {
    
    private final TableIdentifier<Staff> tableIdentifier;
    private SqlTypeMapperHelper<Integer, String> activeHelper;
    
    protected GeneratedStaffSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "sakila", "staff");
    }
    
    protected Staff apply(ResultSet resultSet, int offset) throws SQLException {
        GeneratedStaffImpl entity = new StaffImpl();
        entity.disableModificationTracking();
        entity.setStaffId(   resultSet.getShort(1 + offset));
        entity.setFirstName( resultSet.getString(2 + offset));
        entity.setLastName(  resultSet.getString(3 + offset));
        entity.setAddressId( resultSet.getInt(4 + offset));
        entity.setPicture(   resultSet.getBlob(5 + offset));
        entity.setEmail(     resultSet.getString(6 + offset));
        entity.setStoreId(   resultSet.getShort(7 + offset));
        entity.setActive(    activeHelper.apply(resultSet.getInt(8 + offset)));
        entity.setUsername(  resultSet.getString(9 + offset));
        entity.setPassword(  resultSet.getString(10 + offset));
        entity.setLastUpdate(resultSet.getTimestamp(11 + offset));
        entity.resetModificationTracking();
        return entity;
    }
    
    @Override
    public TableIdentifier<Staff> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Staff> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Staff> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        activeHelper = SqlTypeMapperHelper.create(project, Staff.ACTIVE, Staff.class);
    }
}