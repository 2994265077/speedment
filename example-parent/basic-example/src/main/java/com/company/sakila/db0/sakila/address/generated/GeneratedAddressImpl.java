package com.company.sakila.db0.sakila.address.generated;

import com.company.sakila.db0.sakila.address.Address;
import com.company.sakila.db0.sakila.city.City;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.trait.HasDirtyColumns;

import java.sql.Blob;
import java.sql.Timestamp;
import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.StringJoiner;
import java.util.stream.Stream;

/**
 * The generated base implementation of the {@link
 * com.company.sakila.db0.sakila.address.Address}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAddressImpl implements HasDirtyColumns<Address>, Address {
    
    private final static Set<Identifier> DISABLED_MODIFICATION_TRACKING = Collections.emptySet();
    private int addressId;
    private String address;
    private String address2;
    private String district;
    private int cityId;
    private String postalCode;
    private String phone;
    private Blob location;
    private Timestamp lastUpdate;
    private Set<Identifier> dirtyColumns_;
    
    protected GeneratedAddressImpl() {}
    
    @Override
    public int getAddressId() {
        return addressId;
    }
    
    @Override
    public String getAddress() {
        return address;
    }
    
    @Override
    public Optional<String> getAddress2() {
        return Optional.ofNullable(address2);
    }
    
    @Override
    public String getDistrict() {
        return district;
    }
    
    @Override
    public int getCityId() {
        return cityId;
    }
    
    @Override
    public Optional<String> getPostalCode() {
        return Optional.ofNullable(postalCode);
    }
    
    @Override
    public String getPhone() {
        return phone;
    }
    
    @Override
    public Blob getLocation() {
        return location;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public Address setAddressId(int addressId) {
        allColumnsDirty();
        this.addressId = addressId;
        return this;
    }
    
    @Override
    public Address setAddress(String address) {
        columnDirty(Identifier.ADDRESS);
        this.address = address;
        return this;
    }
    
    @Override
    public Address setAddress2(String address2) {
        columnDirty(Identifier.ADDRESS2);
        this.address2 = address2;
        return this;
    }
    
    @Override
    public Address setDistrict(String district) {
        columnDirty(Identifier.DISTRICT);
        this.district = district;
        return this;
    }
    
    @Override
    public Address setCityId(int cityId) {
        columnDirty(Identifier.CITY_ID);
        this.cityId = cityId;
        return this;
    }
    
    @Override
    public Address setPostalCode(String postalCode) {
        columnDirty(Identifier.POSTAL_CODE);
        this.postalCode = postalCode;
        return this;
    }
    
    @Override
    public Address setPhone(String phone) {
        columnDirty(Identifier.PHONE);
        this.phone = phone;
        return this;
    }
    
    @Override
    public Address setLocation(Blob location) {
        columnDirty(Identifier.LOCATION);
        this.location = location;
        return this;
    }
    
    @Override
    public Address setLastUpdate(Timestamp lastUpdate) {
        columnDirty(Identifier.LAST_UPDATE);
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public City findCityId(Manager<City> foreignManager) {
        return foreignManager.stream().filter(City.CITY_ID.equal(getCityId())).findAny().orElse(null);
    }
    
    void resetModificationTracking() {
        dirtyColumns_ = null;
    }
    
    void disableModificationTracking() {
        dirtyColumns_ = DISABLED_MODIFICATION_TRACKING;
    }
    
    @Override
    public void clearUpdatedColumns() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = null;
        }
    }
    
    private void columnDirty(Identifier column) {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            if (dirtyColumns_ == null) {
                dirtyColumns_ = EnumSet.of(column);
            } else {
                dirtyColumns_.add(column);
            }
        }
    }
    
    private void allColumnsDirty() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = EnumSet.allOf(Identifier.class);
        }
    }
    
    @Override
    public Stream<ColumnIdentifier<Address>> dirtyColumns() {
        return dirtyColumns_ != null ? dirtyColumns_.stream().map(i -> i) : Stream.empty();
    }
    
    private String starForDirty(Identifier id) {
        return dirtyColumns_ != null && dirtyColumns_.contains(id) ? "*" : "";
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add(starForDirty(Identifier.ADDRESS_ID) + "addressId = " +    Objects.toString(getAddressId()));
        sj.add(starForDirty(Identifier.ADDRESS) + "address = " +         Objects.toString(getAddress()));
        sj.add(starForDirty(Identifier.ADDRESS2) + "address2 = " +       Objects.toString(OptionalUtil.unwrap(getAddress2())));
        sj.add(starForDirty(Identifier.DISTRICT) + "district = " +       Objects.toString(getDistrict()));
        sj.add(starForDirty(Identifier.CITY_ID) + "cityId = " +          Objects.toString(getCityId()));
        sj.add(starForDirty(Identifier.POSTAL_CODE) + "postalCode = " +  Objects.toString(OptionalUtil.unwrap(getPostalCode())));
        sj.add(starForDirty(Identifier.PHONE) + "phone = " +             Objects.toString(getPhone()));
        sj.add(starForDirty(Identifier.LOCATION) + "location = " +       Objects.toString(getLocation()));
        sj.add(starForDirty(Identifier.LAST_UPDATE) + "lastUpdate = " +  Objects.toString(getLastUpdate()));
        return "AddressImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Address)) { return false; }
        final Address thatAddress = (Address)that;
        if (this.getAddressId() != thatAddress.getAddressId()) { return false; }
        if (!Objects.equals(this.getAddress(), thatAddress.getAddress())) { return false; }
        if (!Objects.equals(this.getAddress2(), thatAddress.getAddress2())) { return false; }
        if (!Objects.equals(this.getDistrict(), thatAddress.getDistrict())) { return false; }
        if (this.getCityId() != thatAddress.getCityId()) { return false; }
        if (!Objects.equals(this.getPostalCode(), thatAddress.getPostalCode())) { return false; }
        if (!Objects.equals(this.getPhone(), thatAddress.getPhone())) { return false; }
        if (!Objects.equals(this.getLocation(), thatAddress.getLocation())) { return false; }
        if (!Objects.equals(this.getLastUpdate(), thatAddress.getLastUpdate())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getAddressId());
        hash = 31 * hash + Objects.hashCode(getAddress());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAddress2()));
        hash = 31 * hash + Objects.hashCode(getDistrict());
        hash = 31 * hash + Integer.hashCode(getCityId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPostalCode()));
        hash = 31 * hash + Objects.hashCode(getPhone());
        hash = 31 * hash + Objects.hashCode(getLocation());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
}