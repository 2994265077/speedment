package com.company.sakila.db0.sakila.film_text.generated;

import com.company.sakila.db0.sakila.film_text.FilmText;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.trait.HasDirtyColumns;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.StringJoiner;
import java.util.stream.Stream;

/**
 * The generated base implementation of the {@link
 * com.company.sakila.db0.sakila.film_text.FilmText}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedFilmTextImpl implements HasDirtyColumns<FilmText>, FilmText {
    
    private final static Set<Identifier> DISABLED_MODIFICATION_TRACKING = Collections.emptySet();
    private short filmId;
    private String title;
    private String description;
    private Set<Identifier> dirtyColumns_;
    
    protected GeneratedFilmTextImpl() {}
    
    @Override
    public short getFilmId() {
        return filmId;
    }
    
    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public FilmText setFilmId(short filmId) {
        allColumnsDirty();
        this.filmId = filmId;
        return this;
    }
    
    @Override
    public FilmText setTitle(String title) {
        columnDirty(Identifier.TITLE);
        this.title = title;
        return this;
    }
    
    @Override
    public FilmText setDescription(String description) {
        columnDirty(Identifier.DESCRIPTION);
        this.description = description;
        return this;
    }
    
    void resetModificationTracking() {
        dirtyColumns_ = null;
    }
    
    void disableModificationTracking() {
        dirtyColumns_ = DISABLED_MODIFICATION_TRACKING;
    }
    
    @Override
    public void clearUpdatedColumns() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = null;
        }
    }
    
    private void columnDirty(Identifier column) {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            if (dirtyColumns_ == null) {
                dirtyColumns_ = EnumSet.of(column);
            } else {
                dirtyColumns_.add(column);
            }
        }
    }
    
    private void allColumnsDirty() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = EnumSet.allOf(Identifier.class);
        }
    }
    
    @Override
    public Stream<ColumnIdentifier<FilmText>> dirtyColumns() {
        return dirtyColumns_ != null ? dirtyColumns_.stream().map(i -> i) : Stream.empty();
    }
    
    private String starForDirty(Identifier id) {
        return dirtyColumns_ != null && dirtyColumns_.contains(id) ? "*" : "";
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add(starForDirty(Identifier.FILM_ID) + "filmId = " +           Objects.toString(getFilmId()));
        sj.add(starForDirty(Identifier.TITLE) + "title = " +              Objects.toString(getTitle()));
        sj.add(starForDirty(Identifier.DESCRIPTION) + "description = " +  Objects.toString(OptionalUtil.unwrap(getDescription())));
        return "FilmTextImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof FilmText)) { return false; }
        final FilmText thatFilmText = (FilmText)that;
        if (this.getFilmId() != thatFilmText.getFilmId()) { return false; }
        if (!Objects.equals(this.getTitle(), thatFilmText.getTitle())) { return false; }
        if (!Objects.equals(this.getDescription(), thatFilmText.getDescription())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Short.hashCode(getFilmId());
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDescription()));
        return hash;
    }
}