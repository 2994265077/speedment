package com.company.sakila.db0.sakila.store.generated;

import com.company.sakila.db0.sakila.store.Store;
import com.company.sakila.db0.sakila.store.StoreImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.company.sakila.db0.sakila.store.Store} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedStoreSqlAdapter implements SqlAdapter<Store> {
    
    private final TableIdentifier<Store> tableIdentifier;
    
    protected GeneratedStoreSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "sakila", "store");
    }
    
    protected Store apply(ResultSet resultSet, int offset) throws SQLException {
        GeneratedStoreImpl entity = new StoreImpl();
        entity.disableModificationTracking();
        entity.setStoreId(       resultSet.getShort(1 + offset));
        entity.setManagerStaffId(resultSet.getShort(2 + offset));
        entity.setAddressId(     resultSet.getInt(3 + offset));
        entity.setLastUpdate(    resultSet.getTimestamp(4 + offset));
        entity.resetModificationTracking();
        return entity;
    }
    
    @Override
    public TableIdentifier<Store> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Store> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Store> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}