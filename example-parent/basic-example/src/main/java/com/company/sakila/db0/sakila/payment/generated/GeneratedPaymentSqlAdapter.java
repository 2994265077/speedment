package com.company.sakila.db0.sakila.payment.generated;

import com.company.sakila.db0.sakila.payment.Payment;
import com.company.sakila.db0.sakila.payment.PaymentImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.company.sakila.db0.sakila.payment.Payment} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPaymentSqlAdapter implements SqlAdapter<Payment> {
    
    private final TableIdentifier<Payment> tableIdentifier;
    
    protected GeneratedPaymentSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "sakila", "payment");
    }
    
    protected Payment apply(ResultSet resultSet, int offset) throws SpeedmentException {
        final Payment entity = createEntity();
        try {
            entity.setPaymentId(   resultSet.getInt(1 + offset)        );
            entity.setCustomerId(  resultSet.getInt(2 + offset)        );
            entity.setStaffId(     resultSet.getShort(3 + offset)      );
            entity.setRentalId(    getInt(resultSet, 4 + offset)       );
            entity.setAmount(      resultSet.getBigDecimal(5 + offset) );
            entity.setPaymentDate( resultSet.getTimestamp(6 + offset)  );
            entity.setLastUpdate(  resultSet.getTimestamp(7 + offset)  );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected PaymentImpl createEntity() {
        return new PaymentImpl();
    }
    
    @Override
    public TableIdentifier<Payment> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Payment> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Payment> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}