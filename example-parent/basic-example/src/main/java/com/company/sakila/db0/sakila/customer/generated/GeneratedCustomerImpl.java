package com.company.sakila.db0.sakila.customer.generated;

import com.company.sakila.db0.sakila.address.Address;
import com.company.sakila.db0.sakila.customer.Customer;
import com.company.sakila.db0.sakila.store.Store;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.trait.HasDirtyColumns;

import java.sql.Timestamp;
import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.StringJoiner;
import java.util.stream.Stream;

/**
 * The generated base implementation of the {@link
 * com.company.sakila.db0.sakila.customer.Customer}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCustomerImpl implements HasDirtyColumns<Customer>, Customer {
    
    private final static Set<Identifier> DISABLED_MODIFICATION_TRACKING = Collections.emptySet();
    private int customerId;
    private short storeId;
    private String firstName;
    private String lastName;
    private String email;
    private int addressId;
    private int active;
    private Timestamp createDate;
    private Timestamp lastUpdate;
    private Set<Identifier> dirtyColumns_;
    
    protected GeneratedCustomerImpl() {}
    
    @Override
    public int getCustomerId() {
        return customerId;
    }
    
    @Override
    public short getStoreId() {
        return storeId;
    }
    
    @Override
    public String getFirstName() {
        return firstName;
    }
    
    @Override
    public String getLastName() {
        return lastName;
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public int getAddressId() {
        return addressId;
    }
    
    @Override
    public int getActive() {
        return active;
    }
    
    @Override
    public Timestamp getCreateDate() {
        return createDate;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public Customer setCustomerId(int customerId) {
        allColumnsDirty();
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public Customer setStoreId(short storeId) {
        columnDirty(Identifier.STORE_ID);
        this.storeId = storeId;
        return this;
    }
    
    @Override
    public Customer setFirstName(String firstName) {
        columnDirty(Identifier.FIRST_NAME);
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public Customer setLastName(String lastName) {
        columnDirty(Identifier.LAST_NAME);
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public Customer setEmail(String email) {
        columnDirty(Identifier.EMAIL);
        this.email = email;
        return this;
    }
    
    @Override
    public Customer setAddressId(int addressId) {
        columnDirty(Identifier.ADDRESS_ID);
        this.addressId = addressId;
        return this;
    }
    
    @Override
    public Customer setActive(int active) {
        columnDirty(Identifier.ACTIVE);
        this.active = active;
        return this;
    }
    
    @Override
    public Customer setCreateDate(Timestamp createDate) {
        columnDirty(Identifier.CREATE_DATE);
        this.createDate = createDate;
        return this;
    }
    
    @Override
    public Customer setLastUpdate(Timestamp lastUpdate) {
        columnDirty(Identifier.LAST_UPDATE);
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @Override
    public Store findStoreId(Manager<Store> foreignManager) {
        return foreignManager.stream().filter(Store.STORE_ID.equal(getStoreId())).findAny().orElse(null);
    }
    
    @Override
    public Address findAddressId(Manager<Address> foreignManager) {
        return foreignManager.stream().filter(Address.ADDRESS_ID.equal(getAddressId())).findAny().orElse(null);
    }
    
    void resetModificationTracking() {
        dirtyColumns_ = null;
    }
    
    void disableModificationTracking() {
        dirtyColumns_ = DISABLED_MODIFICATION_TRACKING;
    }
    
    @Override
    public void clearUpdatedColumns() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = null;
        }
    }
    
    private void columnDirty(Identifier column) {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            if (dirtyColumns_ == null) {
                dirtyColumns_ = EnumSet.of(column);
            } else {
                dirtyColumns_.add(column);
            }
        }
    }
    
    private void allColumnsDirty() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = EnumSet.allOf(Identifier.class);
        }
    }
    
    @Override
    public Stream<ColumnIdentifier<Customer>> dirtyColumns() {
        return dirtyColumns_ != null ? dirtyColumns_.stream().map(i -> i) : Stream.empty();
    }
    
    private String starForDirty(Identifier id) {
        return dirtyColumns_ != null && dirtyColumns_.contains(id) ? "*" : "";
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add(starForDirty(Identifier.CUSTOMER_ID) + "customerId = " +  Objects.toString(getCustomerId()));
        sj.add(starForDirty(Identifier.STORE_ID) + "storeId = " +        Objects.toString(getStoreId()));
        sj.add(starForDirty(Identifier.FIRST_NAME) + "firstName = " +    Objects.toString(getFirstName()));
        sj.add(starForDirty(Identifier.LAST_NAME) + "lastName = " +      Objects.toString(getLastName()));
        sj.add(starForDirty(Identifier.EMAIL) + "email = " +             Objects.toString(OptionalUtil.unwrap(getEmail())));
        sj.add(starForDirty(Identifier.ADDRESS_ID) + "addressId = " +    Objects.toString(getAddressId()));
        sj.add(starForDirty(Identifier.ACTIVE) + "active = " +           Objects.toString(getActive()));
        sj.add(starForDirty(Identifier.CREATE_DATE) + "createDate = " +  Objects.toString(getCreateDate()));
        sj.add(starForDirty(Identifier.LAST_UPDATE) + "lastUpdate = " +  Objects.toString(getLastUpdate()));
        return "CustomerImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Customer)) { return false; }
        final Customer thatCustomer = (Customer)that;
        if (this.getCustomerId() != thatCustomer.getCustomerId()) { return false; }
        if (this.getStoreId() != thatCustomer.getStoreId()) { return false; }
        if (!Objects.equals(this.getFirstName(), thatCustomer.getFirstName())) { return false; }
        if (!Objects.equals(this.getLastName(), thatCustomer.getLastName())) { return false; }
        if (!Objects.equals(this.getEmail(), thatCustomer.getEmail())) { return false; }
        if (this.getAddressId() != thatCustomer.getAddressId()) { return false; }
        if (this.getActive() != thatCustomer.getActive()) { return false; }
        if (!Objects.equals(this.getCreateDate(), thatCustomer.getCreateDate())) { return false; }
        if (!Objects.equals(this.getLastUpdate(), thatCustomer.getLastUpdate())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getCustomerId());
        hash = 31 * hash + Short.hashCode(getStoreId());
        hash = 31 * hash + Objects.hashCode(getFirstName());
        hash = 31 * hash + Objects.hashCode(getLastName());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEmail()));
        hash = 31 * hash + Integer.hashCode(getAddressId());
        hash = 31 * hash + Integer.hashCode(getActive());
        hash = 31 * hash + Objects.hashCode(getCreateDate());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
}