package com.company.sakila.db0.sakila.actor.generated;

import com.company.sakila.db0.sakila.actor.Actor;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.field.trait.HasDirtyColumns;

import java.sql.Timestamp;
import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.StringJoiner;
import java.util.stream.Stream;

/**
 * The generated base implementation of the {@link
 * com.company.sakila.db0.sakila.actor.Actor}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedActorImpl implements HasDirtyColumns<Actor>, Actor {
    
    private final static Set<Identifier> DISABLED_MODIFICATION_TRACKING = Collections.emptySet();
    private int actorId;
    private String firstName;
    private String lastName;
    private Timestamp lastUpdate;
    private Set<Identifier> dirtyColumns_;
    
    protected GeneratedActorImpl() {}
    
    @Override
    public int getActorId() {
        return actorId;
    }
    
    @Override
    public String getFirstName() {
        return firstName;
    }
    
    @Override
    public String getLastName() {
        return lastName;
    }
    
    @Override
    public Timestamp getLastUpdate() {
        return lastUpdate;
    }
    
    @Override
    public Actor setActorId(int actorId) {
        allColumnsDirty();
        this.actorId = actorId;
        return this;
    }
    
    @Override
    public Actor setFirstName(String firstName) {
        columnDirty(Identifier.FIRST_NAME);
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public Actor setLastName(String lastName) {
        columnDirty(Identifier.LAST_NAME);
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public Actor setLastUpdate(Timestamp lastUpdate) {
        columnDirty(Identifier.LAST_UPDATE);
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    void resetModificationTracking() {
        dirtyColumns_ = null;
    }
    
    void disableModificationTracking() {
        dirtyColumns_ = DISABLED_MODIFICATION_TRACKING;
    }
    
    @Override
    public void clearUpdatedColumns() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = null;
        }
    }
    
    private void columnDirty(Identifier column) {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            if (dirtyColumns_ == null) {
                dirtyColumns_ = EnumSet.of(column);
            } else {
                dirtyColumns_.add(column);
            }
        }
    }
    
    private void allColumnsDirty() {
        if (dirtyColumns_ != DISABLED_MODIFICATION_TRACKING) {
            dirtyColumns_ = EnumSet.allOf(Identifier.class);
        }
    }
    
    @Override
    public Stream<ColumnIdentifier<Actor>> dirtyColumns() {
        return dirtyColumns_ != null ? dirtyColumns_.stream().map(i -> i) : Stream.empty();
    }
    
    private String starForDirty(Identifier id) {
        return dirtyColumns_ != null && dirtyColumns_.contains(id) ? "*" : "";
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add(starForDirty(Identifier.ACTOR_ID) + "actorId = " +        Objects.toString(getActorId()));
        sj.add(starForDirty(Identifier.FIRST_NAME) + "firstName = " +    Objects.toString(getFirstName()));
        sj.add(starForDirty(Identifier.LAST_NAME) + "lastName = " +      Objects.toString(getLastName()));
        sj.add(starForDirty(Identifier.LAST_UPDATE) + "lastUpdate = " +  Objects.toString(getLastUpdate()));
        return "ActorImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Actor)) { return false; }
        final Actor thatActor = (Actor)that;
        if (this.getActorId() != thatActor.getActorId()) { return false; }
        if (!Objects.equals(this.getFirstName(), thatActor.getFirstName())) { return false; }
        if (!Objects.equals(this.getLastName(), thatActor.getLastName())) { return false; }
        if (!Objects.equals(this.getLastUpdate(), thatActor.getLastUpdate())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getActorId());
        hash = 31 * hash + Objects.hashCode(getFirstName());
        hash = 31 * hash + Objects.hashCode(getLastName());
        hash = 31 * hash + Objects.hashCode(getLastUpdate());
        return hash;
    }
}